{"version":3,"sources":["logo.svg","Recipe.js","Nav.js","Home.js","About.js","Contact.js","Footer.js","App.js","serviceWorker.js","index.js","recipe.module.css"],"names":["module","exports","Recipe","title","calories","image","ingredients","totalWeight","cautions","className","style","recipe","imagecont","src","alt","map","ingredient","text","Nav","to","Home","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","label","About","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,4LCyB5BC,EArBA,SAAC,GAAmE,IAAlEC,EAAiE,EAAjEA,MAAOC,EAA0D,EAA1DA,SAAUC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAChE,OACK,yBAAKC,UAAWC,IAAMC,QAClB,yBAAKF,UAAWC,IAAME,WAClB,yBAAKH,UAAWC,IAAML,MAAOQ,IAAKR,EAAOS,IAAI,MAEjD,4BAAKX,GACL,2BAAG,8CAA4BC,GAC/B,wBAAIK,UAAWC,IAAMJ,aAArB,eACG,4BACKA,EAAYS,KAAI,SAAAC,GAAU,OACrB,4BAAKA,EAAWC,UAG7B,2BAAIV,GACJ,2BAAIC,K,OCADU,MAbf,WACI,OACE,6BACM,4BACK,kBAAC,IAAD,CAAMC,GAAG,KAAT,oB,8BC0DFC,EA9DF,WAIb,IAJmB,EAOWC,mBAAS,IAPpB,mBAOZC,EAPY,KAOHC,EAPG,OAQSF,mBAAS,IARlB,mBAQZG,EARY,KAQJC,EARI,OASOJ,mBAAS,WAThB,mBASZK,EATY,KASLC,EATK,KAYnBC,qBAAU,WACRC,MACC,CAACH,IAGJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAdf,WAce,oBAbd,qCAYG,cACXM,EADW,gBAKIA,EAASC,OALb,OAKTC,EALS,OAMfX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,GAPG,2CAAH,qDAsBd,OACE,yBAAKzB,UAAU,OACb,oDACC,0BAAM6B,SAVK,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAOsBhB,UAAU,eAClC,2BAAOgC,KAAK,OAAOhC,UAAU,aAAaiC,MAAOlB,EAAQmB,SAhB9C,SAAAJ,GAClBd,EAAUc,EAAEK,OAAOF,OACnBN,QAAQC,IAAIb,MAeL,4BAASiB,KAAK,SAAShC,UAAU,iBAAjC,WAEH,yBAAKA,UAAU,WACfa,EAAQP,KAAI,SAAAJ,GAAM,OACf,kBAAC,EAAD,CACEkC,IAAKlC,EAAOA,OAAOmC,MACnB3C,MAAOQ,EAAOA,OAAOmC,MACrB1C,SAAUO,EAAOA,OAAOP,SACxBC,MAAOM,EAAOA,OAAON,MACrBC,YAAaK,EAAOA,OAAOL,YAC3BC,YAAaI,EAAOA,OAAOJ,YAC3BC,SAAUG,EAAOA,OAAOH,iBCLrBuC,I,+CChDOC,YCOPC,MAVf,WACI,OACE,gCACM,2EC0BGC,MAlBd,WACC,OACI,kBAAC,IAAD,KACI,yBAAKzC,UAAU,OACX,kBAAC,EAAD,MACA,8BACI,kBAAC,EAAD,OAGJ,kBAAC,EAAD,SCbM0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a,kBExI5BrE,EAAOC,QAAU,CAAC,OAAS,uBAAuB,UAAY,0BAA0B,MAAQ,sBAAsB,YAAc,+B","file":"static/js/main.edc74a25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport style from './recipe.module.css';\r\n\r\n// 1. DEFINE YOUR PROPERTIES\r\nconst Recipe = ({title, calories, image, ingredients, totalWeight, cautions }) => {\r\n   return(\r\n        <div className={style.recipe}>\r\n            <div className={style.imagecont}>\r\n                <img className={style.image} src={image} alt=\"\" />\r\n            </div>\r\n            <h2>{title}</h2>\r\n            <p><strong>Calories: </strong>{calories}</p>\r\n            <h3 className={style.ingredients}>Ingredients</h3>\r\n               <ol>{\r\n                    ingredients.map(ingredient =>(\r\n                         <li>{ingredient.text}</li>\r\n                    ))}\r\n               </ol>\r\n            <p>{totalWeight}</p>\r\n            <p>{cautions}</p>\r\n            \r\n        </div>\r\n   )\r\n}\r\n\r\nexport default Recipe;","import React,{useEffect, useState, Component } from 'react';\r\nimport './App.css';\r\nimport Recipe from './Recipe';\r\nimport {Link} from 'react-router-dom';\r\n\r\n// 1. Nav\r\nfunction Nav() {\r\n    return (\r\n      <nav>\r\n            <h3>\r\n                 <Link to='/'>\r\n                     Recipe Search\r\n                 </ Link>\r\n            </h3>\r\n             \r\n      </nav>\r\n    )\r\n};\r\n\r\nexport default Nav;\r\n","import React,{useEffect, useState, Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Recipe from './Recipe';\r\n\r\n\r\nconst Home = () => {\r\n\r\n\r\n// 2. Get the API KEYS\r\nconst APP_ID = '8c28ac1c';\r\nconst APP_KEY = '33a819b7ffa72d5035152ed7fa432776';\r\n// 3. this is your state\r\nconst [recipes, setRecipes] = useState([]);\r\nconst [search, setSearch] = useState('');\r\nconst [query, setQuery] = useState('chicken');\r\n\r\n// 4.search query\r\nuseEffect(() => {\r\n  getRecipes();\r\n}, [query]);\r\n\r\n// 5. PARSE DATA WTH JSON REST API\r\nconst getRecipes = async () => {\r\n  const response = await fetch(\r\n    `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\n    );\r\n    // 5.1 JSON HERE PLEASE\r\n    const data = await response.json();\r\n    setRecipes(data.hits);\r\n    console.log(data);\r\n}\r\n\r\nconst updateSearch = e => {\r\n   setSearch(e.target.value);\r\n   console.log(search);\r\n}\r\n// 6. CREATE THE SEARCH QUERY FUNCTION\r\nconst getSearch = e => {\r\n  e.preventDefault();\r\n  setQuery(search);\r\n  setSearch('');\r\n}\r\n\r\n// 7. RETURN MARKUP AND MAP YOUR PROPERTIES OUTPUT HERE\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Search for a recipe!</h1>\r\n       <form onSubmit={getSearch} className=\"search-form\">\r\n          <input type=\"text\" className=\"search-bar\" value={search} onChange={updateSearch} />\r\n          <button  type=\"Submit\" className=\"search-button\">Search</button>\r\n       </form>\r\n       <div className=\"recipes\">\r\n      {recipes.map(recipe =>(\r\n          <Recipe \r\n            key={recipe.recipe.label}\r\n            title={recipe.recipe.label}\r\n            calories={recipe.recipe.calories}\r\n            image={recipe.recipe.image}\r\n            ingredients={recipe.recipe.ingredients} \r\n            totalWeight={recipe.recipe.totalWeight}\r\n            cautions={recipe.recipe.cautions} />\r\n        ))}\r\n      </div> \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React,{useEffect, useState, Component } from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\n// 1. About Us\r\nfunction About() {\r\n    // \r\n    useEffect(()=> {\r\n        fetchItems();\r\n    }, []);\r\n\r\n   // Create a state to put the items inside an array\r\n   const [items, setItems] = useState([]);\r\n\r\n   // fetch JSON data function the render HTML USING MAP\r\n   const fetchItems = async () => {\r\n       const data = await fetch('https://api.github.com/users/iamshaunjp/repos'); // This is where we will have to add the dynamic prop later\r\n      \r\n       const items = await data.json();\r\n       console.log(items);\r\n       setItems(items);\r\n   }\r\n\r\n    return (\r\n        <div>\r\n            <h1>About Us - Our Github Repositories</h1>\r\n            <div className=\"container\">\r\n            <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been \r\n                the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of \r\n                type and scrambled it to make a type specimen book. It has survived not only five centuries, but also \r\n                the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s \r\n                with the release of Letraset sheets containing Lorem Ipsum passages, \r\n                and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>\r\n            </div>\r\n            <div class=\"responsiveTable\">\r\n                <table>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Description</th>\r\n                        <th>Url</th>\r\n                        <th>Number of Watchers</th>\r\n                    </tr>\r\n                    {items.map(item => (\r\n                        <tr>\r\n                            <td>{item.name}</td>\r\n                            <td>{item.description}</td>\r\n                            <td>{item.url}</td>\r\n                            <td className=\"number\">{item.watchers}</td>\r\n                        </tr>\r\n                        ))}\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default About;\r\n","import React,{useEffect, useState, Component } from 'react';\r\nimport './App.css';\r\nimport { Form, FormGroup, Input, Label, Button} from 'reactstrap';\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\n\r\n// 2. Contact Form\r\n\r\nclass Contact extends Component {\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            name:'',\r\n            email:'',\r\n            tel:'',\r\n            message:''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    // change state of input\r\n    handleChange = e => {\r\n         this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n    handleSubmit(e) {\r\n        e.preventDefault()\r\n        const { name, email, tel, message} = this.state\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <h1>Get in touch</h1>\r\n            <form  class=\"formContainer\">\r\n                <formgroup>\r\n                    <label for=\"name\">Name: </label>\r\n                    <input type=\"text\"\r\n                           name=\"name\"\r\n                           onChange={this.handleChange} />\r\n                </formgroup>\r\n                <formgroup>\r\n                    <label for=\"email\">Email: </label>\r\n                    <input type=\"email\"\r\n                           name=\"email\" \r\n                           onChange={this.handleChange} />\r\n                </formgroup>\r\n                <formgroup>\r\n                    <label for=\"tel\">Telephone Number: </label>\r\n                    <input type=\"tel\"\r\n                           name=\"tel\" \r\n                           onChange={this.handleChange} />\r\n                </formgroup>\r\n                <formgroup>\r\n                    <label for=\"message\">Message: </label>\r\n                    <textarea\r\n                           name=\"message\"\r\n                           onChange={this.handleChange} />\r\n                </formgroup>\r\n                <button>Submit</button>\r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n \r\n\r\nexport default Contact;\r\n","import React,{useEffect, useState, Component } from 'react';\r\nimport './App.css';\r\nimport Recipe from './Recipe';\r\n\r\n// 4. Footer\r\nfunction Footer() {\r\n    return (\r\n      <footer>\r\n            <div>\r\n                Copyright &copy; 2020. All rights reserved\r\n            </div>\r\n      </footer>\r\n    )\r\n};\r\n\r\nexport default Footer;\r\n","import React,{useEffect, useState, Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Recipe from './Recipe';\n\n// 1.Importing your pages\nimport Nav from './Nav';\nimport Home from './Home';\nimport About from './About';\nimport Contact from './Contact';\nimport Footer from './Footer';\n\n// 1.1. Import Router Elements\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\n// 1.2 Return your import pages\n function App() {\n  return (\n      <Router>\n          <div className=\"App\">\n              <Nav />\n              <main>\n                  <Home />\n                \n              </main>\n              <Footer />\n          </div>\n      </Router>\n  );\n}\n\n// 1.3 Const your page comonenets\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3qK9k\",\"imagecont\":\"recipe_imagecont__135Uk\",\"image\":\"recipe_image__2h30e\",\"ingredients\":\"recipe_ingredients__3BsWj\"};"],"sourceRoot":""}